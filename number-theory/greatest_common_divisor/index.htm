<!DOCTYPE html>
<html>
	<head>
		<title>Algorithm works</title>
		<script src="//cdn.bootcss.com/prefixfree/1.0.7/prefixfree.min.js"></script>
		<script src="../../js/acesrc/ace.js"></script>
		<script src="../../js/codehlt.js"></script>
		<link href="../../favicon.png" rel="icon" type="image/png" />
		<link href="../../css/page.css" rel="stylesheet"/>
		<script type="text/x-mathjax-config">
			MathJax.Hub.Config({
				extensions: ["tex2jax.js"],
				jax: ["input/TeX", "output/SVG"],
				tex2jax: {
					inlineMath: [ ['$','$'], ["\\(","\\)"] ],
					displayMath: [ ['$$','$$'], ["\\[","\\]"] ],
					processEscapes: true
				},
				"HTML-CSS": { availableFonts: ["STIX","TeX"] }
			});
		</script>
		<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_SVG"></script>
	</head>
	<body>
		<div class="page">
			<div class="float downside"><a href="../">返回'数论算法'</a><space style="width:0.4em;height:1em;"></space><a href="../../">返回首页</a></div>
			<h1>最大公约数问题</h1>
			<p>整除理论作为初等数论的重要组成部分,是研究时间最早的数学领域,其历史可追溯到公元前六世纪,发源于古希腊并在公元前四世纪以前形成完善的体系.这个问题大约在毕达哥拉斯时代(公元前六世纪)已经出现,并且可能发展出了辗转相除法(首次出现于欧几里得《几何原本》).这是一个有效算法,时间复杂度为$\mathtt{O}(n^2\log{n})$.</p>
			<p>欧几里得给出过这个算法的证明.事实上,数论的研究在那时已经有了现代数学的雏形,其本质上不同于古中国的经验主义数学,是逻辑推演的结果.</p>
			<h2>辗转相除法</h2>
			<p>这个算法本质上基于这么一个公式:$(a,b)=(b,a\bmod b)~~(a\ge b)$.</p>
			<p>这个挺简单的公式,要证明起来需要从唯一分解定理开始讲,事实上还是不那么简单的.有个非常简单的证明思路,就是令$p=(a,b)$,$c=a/p,d=b/p,e=(a\bmod b)/p$,那么显然有$c\equiv e\pmod{d}$,此时可判定$(c,d)=1$,否则可以在两边的结果处都除以一个$(c,d)$,也就是结果要乘上$(c,d)$,显然与最大公约数的定义不符.</p>
			<h3>伪代码</h3>
<pre>int gcd(a,b)=
	[a if b==0 else gcd(b,a%b)]</pre>
			<h3>C++代码</h3>
<pre class="codehlt" data-mode="ace/mode/c_cpp" data-height="100px">inline long gcd(long a,long b){
	return b?gcd(b,a%b):a;
}</pre>
			<h3>更相相损术与Stein算法</h3>
			<p>更相相损术出处:《九章算术》.</p>
			<blockquote quote>
				可半者半之，不可半者，副置分母、子之数，以少减多，更相减损，求其等也。以等数约之。
			</blockquote>
			<p>主要思想:将两数迭代相减,如果两数都为偶数则将两数都取其半,答案乘2.直到此算法中两数相等为止.</p>
<pre class="codehlt" data-mode="ace/mode/c_cpp" data-height="200px" data-width="900px">//Obsoleted exptime method.
#include "algorithm"
inline int gcd_substraction(int a,int b){
	if(a&lt;b) std::swap(a,b);
	a-=b;
	if(a &amp; 1 || b &amp; 1) return gcd_substraction(a,b); else return gcd(a>>1,b>>1)&lt;&lt;1;
}
</pre>
			<h4>Stein算法</h4>
			<blockquote warn>这个算法可以是对更相相损术的另一种理解.</blockquote>
			<blockquote quote><a href="http://www.sciencedirect.com/science/article/pii/0021999167900472" title="SD/Non-free">Stein论文地址</a></blockquote>
			<p>主要思想: 在上面算法的基础上,每当其中有一个数有2因子就除去.</p>
<pre class="codehlt" data-mode="ace/mode/c_cpp" data-height="200px" data-width="900px">//better O(n^2) method
#include "algorithm"
inline long long abs(long long a){
	return (a>0)?a:-a;
}
inline long long gcd_binary(long long a,long long b){
	if(!b) return a;
	if(!a) return b;
	long long q=0;
	while(!(a&amp;1)) a>>=1,++q;
	while(!(b&amp;1)) b>>=1,--q;
	q=abs(q);
	if(a&lt;b) std::swap(a,b);
	return gcd_binary(a-b,b)&lt;&lt;q;
}
</pre>
		</div>
		<script>
			highlightAllWithACE();
		</script>
	</body>
</html>
